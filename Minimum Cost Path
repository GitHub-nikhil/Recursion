//If removed Memoization , it will be an recursive solution 
const int size1=1000;
int arr[size1][size1];
int dp[size1][size1];
int solve_recursion(int n,int m){
if(n == 1 && m == 1) return arr[n][m];
if(n<=0) return 10000;
if(m<=0) return 10000;
if(dp[n][m]>1) return dp[n][m];
return dp[n][m] = arr[n][m]+min(solve_recursion(n-1,m),solve_recursion(n,m-1));
}
int main(){
int n,m;
cin>>n>>m;
for(int i = 1;i<=n;i++){
for(int j = 1;j<=m;j++){
cin>>arr[i][j];
}
}
int ans = solve_recursion(n,m);
cout<<ans<<endl;
return 0;
}
